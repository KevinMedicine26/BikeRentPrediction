# 自行车租赁预测系统使用说明

## 环境配置

### 后端 API 设置
1. 打开命令提示符或 PowerShell，并导航到项目根目录
2. 激活虚拟环境：
   ```
   .\venv\Scripts\activate
   ```
3. 安装必要的 Python 包：
   ```
   pip install flask flask-cors pandas numpy scikit-learn
   ```

### 前端设置
1. 导航到前端目录：
   ```
   cd frontend
   ```
2. 安装前端依赖：
   ```
   npm install
   ```

## 运行演示应用

### 启动后端服务
1. 确保您已激活虚拟环境（终端提示符前应显示 "(venv)"）

cd api
2. 在项目根目录下运行：
   ```
   python api/app.py
   ```
3. 后端 API 将在 http://127.0.0.1:5000 上运行



start a new terminal

### 启动前端应用
1. 在新的命令提示符或 PowerShell 窗口中
2. 导航到前端目录：
   ```
   cd frontend
   ```
3. 运行前端开发服务器：
   ```
   npm start
   ```
4. 前端应用将在 http://127.0.0.1:3000 上运行，并会自动在浏览器中打开

## 使用应用

1. 通过浏览器访问 http://127.0.0.1:3000
2. 应用界面允许您：
   - 查看自行车租赁预测
   - 调整各种参数（如天气条件、温度等）来查看不同情景下的预测结果
   - 访问历史数据和其他功能

## 停止应用

要停止应用，在各自的终端窗口中按 Ctrl+C

## 注意事项

- 当前演示使用的是模拟模型，因为实际模型文件没有找到
- 确保在运行前端之前先启动后端 API



## 前端测试方法

### 单元测试
1. 导航到前端目录：
   ```
   cd frontend
   ```
2. 运行单元测试：
   ```
   npm test
   ```
   此命令将启动测试运行器，并执行所有测试文件。

3. 查看测试覆盖率报告：
   ```
   npm test -- --coverage
   ```
   这将生成详细的测试覆盖率报告，显示代码的测试覆盖情况。

### 组件测试
1. 为组件创建测试文件，命名格式为 `组件名.test.js`（例如：`BikeRentalDashboard.test.js`）
2. 组件测试示例：
   ```javascript
   import { render, screen } from '@testing-library/react';
   import BikeRentalDashboard from './components/BikeRentalDashboard';

   test('渲染自行车租赁仪表盘', () => {
     render(<BikeRentalDashboard />);
     const titleElement = screen.getByText(/自行车租赁仪表盘/i);
     expect(titleElement).toBeInTheDocument();
   });
   ```

### 端到端测试
1. 安装 Cypress 测试工具：
   ```
   npm install --save-dev cypress
   ```

2. 将以下脚本添加到 `package.json` 文件的 `scripts` 部分：
   ```json
   "cypress:open": "cypress open",
   "cypress:run": "cypress run"
   ```

3. 运行 Cypress 测试：
   ```
   npm run cypress:open
   ```
   这将打开 Cypress 测试运行器界面，您可以在其中选择要运行的测试。

4. 创建 Cypress 测试示例 (`cypress/integration/dashboard.spec.js`)：
   ```javascript
   describe('仪表盘测试', () => {
     it('访问仪表盘页面', () => {
       cy.visit('http://localhost:3000');
       cy.contains('自行车租赁仪表盘').should('be.visible');
     });

     it('测试预测按钮', () => {
       cy.visit('http://localhost:3000');
       cy.contains('预测租赁量').click();
       cy.get('[data-testid="prediction-result"]').should('be.visible');
     });
   });
   ```

### 性能测试
1. 使用 Chrome 开发者工具进行性能测试：
   - 打开应用并按 F12 打开开发者工具
   - 切换到 "Performance" 标签
   - 点击记录按钮，与应用互动，然后停止记录
   - 分析渲染时间、JS 执行时间等性能指标

2. 使用 Lighthouse 进行性能审计：
   - 在 Chrome 开发者工具中切换到 "Lighthouse" 标签
   - 点击 "Generate report" 生成性能报告
   - 查看性能、可访问性、最佳实践和 SEO 分数

### 调试技巧
1. 使用 React 开发者工具插件：
   - 安装 Chrome 或 Firefox 的 React 开发者工具扩展
   - 可以检查组件层次结构、状态和属性

2. 使用控制台日志：
   - 在关键位置添加 `console.log()` 语句来追踪组件生命周期和数据流
   - 使用 `console.table()` 显示复杂数据结构

3. 使用断点调试：
   - 在开发者工具中设置断点
   - 使用 `debugger;` 语句在代码中设置断点

在测试前端应用时，建议创建一个专门的测试环境，可以通过设置环境变量 `REACT_APP_API_URL` 来指向一个模拟的后端服务，而不是真实的 API。这样可以确保测试的稳定性和独立性。