{"ast":null,"code":"// Mock data for the Bike Rental Prediction System\n\n// Mock prediction result\nexport const mockPredictionResult = {\n  prediction: 285,\n  resources: {\n    workers_needed: 6,\n    maintenance_staff: 2,\n    distribution: {\n      'Central Park': 86,\n      'Downtown': 71,\n      'Riverside': 43,\n      'City Center': 57,\n      'University': 28\n    }\n  },\n  input_parameters: {\n    season: 2,\n    month: 5,\n    hour: 14,\n    holiday: 0,\n    weekday: 1,\n    workingday: 1,\n    weather: 1,\n    temp: 25,\n    humidity: 55,\n    windspeed: 12\n  },\n  event_message: null\n};\n\n// Mock historical data\nexport const mockHistoricalData = Array.from({\n  length: 24 * 7\n}, (_, i) => {\n  const hour = i % 24;\n  const dayOfWeek = Math.floor(i / 24);\n  const isWeekend = dayOfWeek >= 5;\n  const isBusinessHour = hour >= 8 && hour <= 18;\n  const isPeakHour = hour >= 7 && hour <= 9 || hour >= 16 && hour <= 18;\n  let baseRentals = 100;\n  if (isWeekend) {\n    baseRentals = isBusinessHour ? 200 : 80;\n  } else {\n    baseRentals = isPeakHour ? 350 : isBusinessHour ? 180 : 50;\n  }\n\n  // Add some randomness\n  const randomFactor = 0.8 + Math.random() * 0.4; // Random between 0.8 and 1.2\n  const rentals = Math.floor(baseRentals * randomFactor);\n  const date = new Date();\n  date.setDate(date.getDate() - 7 + dayOfWeek);\n  date.setHours(hour, 0, 0, 0);\n  return {\n    date: date.toISOString().split('T')[0],\n    hour,\n    rentals,\n    timestamp: date.toISOString()\n  };\n});\n\n// Mock worker data\nexport const mockWorkers = [{\n  id: '1',\n  name: 'John Doe',\n  station: 'Central Park',\n  shift: 'Morning',\n  status: 'Active'\n}, {\n  id: '2',\n  name: 'Jane Smith',\n  station: 'Downtown',\n  shift: 'Afternoon',\n  status: 'Active'\n}, {\n  id: '3',\n  name: 'Mike Johnson',\n  station: 'Riverside',\n  shift: 'Evening',\n  status: 'On Leave'\n}, {\n  id: '4',\n  name: 'Sarah Williams',\n  station: 'City Center',\n  shift: 'Morning',\n  status: 'Active'\n}, {\n  id: '5',\n  name: 'Robert Brown',\n  station: 'University',\n  shift: 'Afternoon',\n  status: 'Active'\n}];\n\n// Mock bike data\nexport const mockBikes = [{\n  id: '101',\n  type: 'Electric',\n  station: 'Central Park',\n  status: 'Available',\n  lastMaintenance: '2025-03-15'\n}, {\n  id: '102',\n  type: 'Regular',\n  station: 'Downtown',\n  status: 'In Use',\n  lastMaintenance: '2025-03-10'\n}, {\n  id: '103',\n  type: 'Electric',\n  station: 'Riverside',\n  status: 'Maintenance',\n  lastMaintenance: '2025-04-01'\n}, {\n  id: '104',\n  type: 'Regular',\n  station: 'Central Park',\n  status: 'Available',\n  lastMaintenance: '2025-03-20'\n}, {\n  id: '105',\n  type: 'Electric',\n  station: 'City Center',\n  status: 'Available',\n  lastMaintenance: '2025-03-25'\n}, {\n  id: '106',\n  type: 'Regular',\n  station: 'University',\n  status: 'In Use',\n  lastMaintenance: '2025-03-18'\n}, {\n  id: '107',\n  type: 'Electric',\n  station: 'Downtown',\n  status: 'Available',\n  lastMaintenance: '2025-03-22'\n}, {\n  id: '108',\n  type: 'Regular',\n  station: 'Riverside',\n  status: 'Maintenance',\n  lastMaintenance: '2025-04-05'\n}];\n\n// Weather parameter options for the prediction form\nexport const weatherOptions = {\n  season: [{\n    value: 1,\n    label: 'Spring'\n  }, {\n    value: 2,\n    label: 'Summer'\n  }, {\n    value: 3,\n    label: 'Fall'\n  }, {\n    value: 4,\n    label: 'Winter'\n  }],\n  holiday: [{\n    value: 0,\n    label: 'No'\n  }, {\n    value: 1,\n    label: 'Yes'\n  }],\n  weekday: [{\n    value: 0,\n    label: 'Sunday'\n  }, {\n    value: 1,\n    label: 'Monday'\n  }, {\n    value: 2,\n    label: 'Tuesday'\n  }, {\n    value: 3,\n    label: 'Wednesday'\n  }, {\n    value: 4,\n    label: 'Thursday'\n  }, {\n    value: 5,\n    label: 'Friday'\n  }, {\n    value: 6,\n    label: 'Saturday'\n  }],\n  workingday: [{\n    value: 0,\n    label: 'No'\n  }, {\n    value: 1,\n    label: 'Yes'\n  }],\n  weather: [{\n    value: 1,\n    label: 'Clear'\n  }, {\n    value: 2,\n    label: 'Mist/Cloudy'\n  }, {\n    value: 3,\n    label: 'Light Rain/Snow'\n  }, {\n    value: 4,\n    label: 'Heavy Rain/Snow/Fog'\n  }]\n};","map":{"version":3,"names":["mockPredictionResult","prediction","resources","workers_needed","maintenance_staff","distribution","input_parameters","season","month","hour","holiday","weekday","workingday","weather","temp","humidity","windspeed","event_message","mockHistoricalData","Array","from","length","_","i","dayOfWeek","Math","floor","isWeekend","isBusinessHour","isPeakHour","baseRentals","randomFactor","random","rentals","date","Date","setDate","getDate","setHours","toISOString","split","timestamp","mockWorkers","id","name","station","shift","status","mockBikes","type","lastMaintenance","weatherOptions","value","label"],"sources":["D:/BikeProj/BikeRentPrediction/frontend/src/services/mockData.js"],"sourcesContent":["// Mock data for the Bike Rental Prediction System\n\n// Mock prediction result\nexport const mockPredictionResult = {\n  prediction: 285,\n  resources: {\n    workers_needed: 6,\n    maintenance_staff: 2,\n    distribution: {\n      'Central Park': 86,\n      'Downtown': 71,\n      'Riverside': 43,\n      'City Center': 57,\n      'University': 28\n    }\n  },\n  input_parameters: {\n    season: 2,\n    month: 5,\n    hour: 14,\n    holiday: 0,\n    weekday: 1,\n    workingday: 1,\n    weather: 1,\n    temp: 25,\n    humidity: 55,\n    windspeed: 12\n  },\n  event_message: null\n};\n\n// Mock historical data\nexport const mockHistoricalData = Array.from({ length: 24 * 7 }, (_, i) => {\n  const hour = i % 24;\n  const dayOfWeek = Math.floor(i / 24);\n  const isWeekend = dayOfWeek >= 5;\n  const isBusinessHour = hour >= 8 && hour <= 18;\n  const isPeakHour = (hour >= 7 && hour <= 9) || (hour >= 16 && hour <= 18);\n  \n  let baseRentals = 100;\n  if (isWeekend) {\n    baseRentals = isBusinessHour ? 200 : 80;\n  } else {\n    baseRentals = isPeakHour ? 350 : (isBusinessHour ? 180 : 50);\n  }\n  \n  // Add some randomness\n  const randomFactor = 0.8 + Math.random() * 0.4; // Random between 0.8 and 1.2\n  const rentals = Math.floor(baseRentals * randomFactor);\n  \n  const date = new Date();\n  date.setDate(date.getDate() - 7 + dayOfWeek);\n  date.setHours(hour, 0, 0, 0);\n  \n  return {\n    date: date.toISOString().split('T')[0],\n    hour,\n    rentals,\n    timestamp: date.toISOString()\n  };\n});\n\n// Mock worker data\nexport const mockWorkers = [\n  { id: '1', name: 'John Doe', station: 'Central Park', shift: 'Morning', status: 'Active' },\n  { id: '2', name: 'Jane Smith', station: 'Downtown', shift: 'Afternoon', status: 'Active' },\n  { id: '3', name: 'Mike Johnson', station: 'Riverside', shift: 'Evening', status: 'On Leave' },\n  { id: '4', name: 'Sarah Williams', station: 'City Center', shift: 'Morning', status: 'Active' },\n  { id: '5', name: 'Robert Brown', station: 'University', shift: 'Afternoon', status: 'Active' }\n];\n\n// Mock bike data\nexport const mockBikes = [\n  { id: '101', type: 'Electric', station: 'Central Park', status: 'Available', lastMaintenance: '2025-03-15' },\n  { id: '102', type: 'Regular', station: 'Downtown', status: 'In Use', lastMaintenance: '2025-03-10' },\n  { id: '103', type: 'Electric', station: 'Riverside', status: 'Maintenance', lastMaintenance: '2025-04-01' },\n  { id: '104', type: 'Regular', station: 'Central Park', status: 'Available', lastMaintenance: '2025-03-20' },\n  { id: '105', type: 'Electric', station: 'City Center', status: 'Available', lastMaintenance: '2025-03-25' },\n  { id: '106', type: 'Regular', station: 'University', status: 'In Use', lastMaintenance: '2025-03-18' },\n  { id: '107', type: 'Electric', station: 'Downtown', status: 'Available', lastMaintenance: '2025-03-22' },\n  { id: '108', type: 'Regular', station: 'Riverside', status: 'Maintenance', lastMaintenance: '2025-04-05' }\n];\n\n// Weather parameter options for the prediction form\nexport const weatherOptions = {\n  season: [\n    { value: 1, label: 'Spring' },\n    { value: 2, label: 'Summer' },\n    { value: 3, label: 'Fall' },\n    { value: 4, label: 'Winter' }\n  ],\n  holiday: [\n    { value: 0, label: 'No' },\n    { value: 1, label: 'Yes' }\n  ],\n  weekday: [\n    { value: 0, label: 'Sunday' },\n    { value: 1, label: 'Monday' },\n    { value: 2, label: 'Tuesday' },\n    { value: 3, label: 'Wednesday' },\n    { value: 4, label: 'Thursday' },\n    { value: 5, label: 'Friday' },\n    { value: 6, label: 'Saturday' }\n  ],\n  workingday: [\n    { value: 0, label: 'No' },\n    { value: 1, label: 'Yes' }\n  ],\n  weather: [\n    { value: 1, label: 'Clear' },\n    { value: 2, label: 'Mist/Cloudy' },\n    { value: 3, label: 'Light Rain/Snow' },\n    { value: 4, label: 'Heavy Rain/Snow/Fog' }\n  ]\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}